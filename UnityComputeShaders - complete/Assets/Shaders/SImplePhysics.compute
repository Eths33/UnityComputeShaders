#pragma kernel CSMain
#define GROUP_SIZE 256
#define PI2 6.28318530718

struct Ball
{
	float3 position;
	float3 velocity;
	float4 color;
};

RWStructuredBuffer<Ball> ballsBuffer;

float deltaTime;
int ballsCount;
float radius;
float4 limitsXZ;
float floorY;

#define LIMITS_MIN_X limitsXZ.x
#define LIMITS_MAX_X limitsXZ.y
#define LIMITS_MIN_Z limitsXZ.z
#define LIMITS_MAX_Z limitsXZ.w
#define LIMITS_MIN_Y floorY

[numthreads(GROUP_SIZE,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	Ball ball = ballsBuffer[id.x];

	ball.position += ball.velocity * deltaTime;
	
	// keep objects inside room
	if ( ball.position.x < LIMITS_MIN_X || ball.position.x > LIMITS_MAX_X ) {

		ball.position.x = clamp( ball.position.x, LIMITS_MIN_X, LIMITS_MAX_X );
		ball.velocity.x = - ball.velocity.x;

	}

	if ( ball.position.y < LIMITS_MIN_Y ) {

		ball.position.y = LIMITS_MIN_Y;

		ball.velocity.xz *= 0.96;
		ball.velocity.y = - ball.velocity.y * 0.9;

	}

	if ( ball.position.z < LIMITS_MIN_Z || ball.position.z > LIMITS_MAX_Z ) {

		ball.position.z = clamp( ball.position.z, LIMITS_MIN_Z, LIMITS_MAX_Z );
		ball.velocity.z = - ball.velocity.z;

	}

	float3 normal;
	float3 relativeVelocity;


	// Target ball only computes its interaction with particles that 38R
	for (int i = id.x + 1; i < ballsCount; i++) {
		Ball ball2 = ballsBuffer[ (uint)i ];

		//B1B2 vector pointing at ball 1 from ball 2
		normal = ball.position - ball2.position;
		
		const float distance = length(normal);

		// Radius * 2 becasue we need the distance from the center of one ball to the other
		if ( distance < 2 * radius ) {
			// If entered the balls surfaces have passed through each other

			// Multiply vector by (1/2 * magnitude of the vector - radius) 
			// d2m = 1/2 * magnitude = dist to mid point between the two centers of the interacting particles
			// d2m - radius = distance from no collision and is negative since their is a collision
			// n2
			normal *= 0.5 * distance - radius;

			//p1 (*1)
			ball.position -= normal;
			
			//n3
			normal = normalize(normal);

			//rv (vector)
			relativeVelocity = ball.velocity - ball2.velocity;

			// n4 how much the relative velocity applies in the direction in which we have just moved the ball (*1)
			// How much we have adjusted the velocity to achive this movement 
			normal *= dot( relativeVelocity, normal );

			// bv
			ball.velocity -= normal;
		}

	}

	ball.velocity.xz *= 0.98;
	ball.velocity.y -= 2.8 * deltaTime;

	ballsBuffer[id.x] = ball;
}


